using GymApp.Class;using GymApp.Data;using GymApp.Data.Model;using GymApp.Validation;using Microsoft.EntityFrameworkCore;using System;using System.Collections.Generic;using System.Drawing;using System.Globalization;using System.Linq;using System.Windows.Forms;namespace GymApp{    public partial class MainForm : Telerik.WinControls.UI.RadForm    {        private List<User> users;        private GymContext _contextDb = new GymContext();        private UserValidation UserValidation { get; set; }        private List<TextBox> userPageTextBox;        private List<SubRowTableData> subRows;        private List<AttendanceRowTableData> attendanceRows;        private int ComboBoxSelectedIndex = 0;

        #region Golobal
        public MainForm()        {            InitializeComponent();            InitializePages();
            FormBorderStyle = FormBorderStyle.FixedSingle;            _contextDb = Program.ContextDb;        }        private void SyncTables()        {            users = _contextDb.Users                .Include(u => u.Subscription)                .ToList();            subRows = new List<SubRowTableData>();            for (int i = 0; i < users.Count; i++)            {                subRows.Add(new SubRowTableData(users[i]));                subRows[i].RowNumber = i + 1;                users[i].RowNumber = i + 1;            }            attendanceRows = new List<AttendanceRowTableData>();            List<Attendance> attendances = _contextDb.Attendances.Include(a => a.User).OrderByDescending(a => a.ActionTime).ToList();            for (int i = 0; i < attendances.Count; i++)            {                attendanceRows.Add(new AttendanceRowTableData(attendances[i]));                attendanceRows[i].RowNumber = i + 1;            }            DataGridViewUser.DataSource = null;            DataGridViewUser.DataSource = users;            DataGridViewSubs.DataSource = null;            DataGridViewSubs.DataSource = subRows;            DataGridViewAttendance.DataSource = null;            DataGridViewAttendance.DataSource = attendanceRows;            DataGridViewUser.Refresh();            DataGridViewSubs.Refresh();            DataGridViewAttendance.Refresh();            RefreshUsersComboBox();        }

        #endregion Golobal
        #region UserManagerPage
        private void InitializePages()        {            UserValidation = new();            userPageTextBox = new List<TextBox> { NationIdTextBox, FirstNameTextBox, LastNameTextBox, PhoneTextBox, AddressTextBox };            ChangeBirthDateTimePickerToPersian();            SyncTables();        }        private void ChangeBirthDateTimePickerToPersian()        {            Application.CurrentCulture = new CultureInfo("fa-IR");            BirthDateTimePicker.Format = DateTimePickerFormat.Custom;            BirthDateTimePicker.MaxDate = DateTime.Now;            BirthDateTimePicker.CustomFormat = Application.CurrentCulture.DateTimeFormat.LongDatePattern;        }        private void FirstNameTextBox_Validating(object sender, System.ComponentModel.CancelEventArgs e)        {            var (hasError, errorMessage) = UserValidation.ValidateFirstName(FirstNameTextBox.Text);            if (hasError)            {                e.Cancel = true;                UserErrorProvider.SetError(FirstNameTextBox, errorMessage);                return;            }            e.Cancel = false;            UserErrorProvider.SetError(FirstNameTextBox, "");        }        private void LastNameTextBox_Validating(object sender, System.ComponentModel.CancelEventArgs e)        {            var (hasError, errorMessage) = UserValidation.ValidateLastName(LastNameTextBox.Text);            if (hasError)            {                e.Cancel = true;                UserErrorProvider.SetError(LastNameTextBox, errorMessage);                return;            }            e.Cancel = false;            UserErrorProvider.SetError(LastNameTextBox, "");        }        private void NationIdTextBox_Validating(object sender, System.ComponentModel.CancelEventArgs e)        {            var (hasError, errorMessage) = UserValidation.ValidateNationalId(NationIdTextBox.Text);            if (hasError)            {                e.Cancel = true;                UserErrorProvider.SetError(NationIdTextBox, errorMessage);                return;            }            e.Cancel = false;            UserErrorProvider.SetError(NationIdTextBox, "");        }        private void PhoneTextBox_Validating(object sender, System.ComponentModel.CancelEventArgs e)        {            var (hasError, errorMessage) = UserValidation.ValidatePhoneNumber(PhoneTextBox.Text);            if (hasError)            {                e.Cancel = true;                UserErrorProvider.SetError(PhoneTextBox, errorMessage);                return;            }            e.Cancel = false;            UserErrorProvider.SetError(PhoneTextBox, "");        }        private void AddressTextBox_Validating(object sender, System.ComponentModel.CancelEventArgs e)        {            var (hasError, errorMessage) = UserValidation.ValidateAddress(AddressTextBox.Text);            if (hasError)            {                e.Cancel = true;                UserErrorProvider.SetError(AddressTextBox, errorMessage);                return;            }            e.Cancel = false;            UserErrorProvider.SetError(AddressTextBox, "");        }        private void UserPageSubmitButton_Click(object sender, EventArgs e)        {            ValidateUserPageInputs();            List<string> errors = GetUserPageErrors();            bool isFormValid = errors.Count == 0;            if (isFormValid)            {                User newUser = CreateUser();                try                {                    Cursor.Current = Cursors.WaitCursor;                    Enabled = false;                    _contextDb.Users.Add(newUser);                    _contextDb.SaveChanges();                    ClearUserPageInputs();                    SyncTables();                    MessageBox.Show("!کاربر جدید با موفقیت اضافه شد", "موفقیت", MessageBoxButtons.OK, MessageBoxIcon.Information);                }                finally                {                    Cursor.Current = Cursors.Default;                    Enabled = true;                }            }            else            {                MessageBox.Show("!لطفا مقادیر فیلد های ورودی را به درستی وارد کنید", "خطا", MessageBoxButtons.OK, MessageBoxIcon.Error);            }        }        private void ClearUserPageInputs()        {            foreach (var textBox in userPageTextBox)            {                textBox.Clear();            }        }        private User CreateUser()        {            var birthdate = BirthDateTimePicker.Value;            return new User            {                FirstName = FirstNameTextBox.Text,                LastName = LastNameTextBox.Text,                NationalId = NationIdTextBox.Text,                PhoneNumber = PhoneTextBox.Text,                Birthdate = new DateTime(birthdate.Year, birthdate.Month, birthdate.Day, 0, 0, 0),                Address = AddressTextBox.Text,                Subscription = new Subscription()                {                    ExpirationDate = DateTime.UnixEpoch,                    SessionCount = 0,                }            };        }        private List<string> GetUserPageErrors()        {            List<string> errors = new List<string>();            foreach (var textBox in userPageTextBox)            {                string error = UserErrorProvider.GetError(textBox);                if (!string.IsNullOrEmpty(error))                {                    errors.Add(error);                }            }            return errors;        }        private void ValidateUserPageInputs()        {            var systemCancel = new System.ComponentModel.CancelEventArgs();

            // Validate each TextBox
            NationIdTextBox_Validating(NationIdTextBox, systemCancel);            FirstNameTextBox_Validating(FirstNameTextBox, systemCancel);            LastNameTextBox_Validating(LastNameTextBox, systemCancel);            PhoneTextBox_Validating(PhoneTextBox, systemCancel);            AddressTextBox_Validating(AddressTextBox, systemCancel);        }        private void DataGridViewUser_CellClick(object sender, DataGridViewCellEventArgs e)        {            if (e.RowIndex >= 0)            {                if (e.ColumnIndex == DataGridViewUser.Columns["ColumnUserDelete"]?.Index)                {                    var row = DataGridViewUser.Rows[e.RowIndex];                    var user = row.DataBoundItem as User;                    if (user != null)                    {                        DeleteUser(user.UserId);                    }                }                if (e.ColumnIndex == DataGridViewUser.Columns["ColumnUserEdit"]?.Index)                {                    var row = DataGridViewUser.Rows[e.RowIndex];                    var user = row.DataBoundItem as User;                    if (user != null)                    {                        new EditUserForm(user.UserId).ShowDialog();                        SyncTables();                    }                }            }        }        private void DeleteUser(int userId)        {            string message = "آیا مطمئن هستید که می‌خواهید این کاربر را حذف کنید؟";            string caption = "حذف کاربر";            DialogResult result = MessageBox.Show(message, caption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);            if (result == DialogResult.Yes)            {                try                {                    var user = _contextDb.Users.AsQueryable().First(x => x.UserId == userId);                    if (user == null)                        return;                    _contextDb.Users.Remove(user);                    _contextDb.SaveChanges();                    SyncTables();                    MessageBox.Show("!کاربر با موفقیت حذف شد", "موفقیت", MessageBoxButtons.OK, MessageBoxIcon.Information);                }                catch (Exception ex)                {                    MessageBox.Show($"خطا در حذف کاربر: {ex.Message}", "خطا", MessageBoxButtons.OK, MessageBoxIcon.Error);                }            }        }

        #endregion UserManagerPage
        #region SubMangerPage
        private void DataGridViewSubs_CellClick(object sender, DataGridViewCellEventArgs e)        {            if (e.RowIndex >= 0)            {                if (e.ColumnIndex == DataGridViewSubs.Columns["ColumnSubEdit"]?.Index)                {                    var row = DataGridViewSubs.Rows[e.RowIndex];                    var subData = row.DataBoundItem as SubRowTableData;                    if (subData != null)                    {                        new EditSubForm(subData.SubscriptionId).ShowDialog();                        SyncTables();                    }                }            }        }

        #endregion SubMangerPage
        #region
        private void TestButton_Click(object sender, EventArgs e)        {            if (ComboBoxUsers.Items.Count == 0 || ComboBoxUsers.SelectedItem == null)            {                MessageBox.Show("!خطا: لطفا یک کابر انتخاب کنید", "خطا", MessageBoxButtons.OK, MessageBoxIcon.Error);                return;            }            var user = (User)ComboBoxUsers.SelectedItem;            new CheckInOutForm(user.UserId).ShowDialog();            ComboBoxSelectedIndex = ComboBoxUsers.SelectedIndex;            SyncTables();        }

        private void RefreshUsersComboBox()        {            ComboBoxUsers.Items.Clear();            ComboBoxUsers.Items.AddRange(users.ToArray());            ComboBoxUsers.DrawItem += ComboBoxUsers_DrawItem;            ComboBoxUsers.SelectedIndex = ComboBoxUsers.Items.Count > ComboBoxSelectedIndex ? ComboBoxSelectedIndex : 0;        }        private void ComboBoxUsers_DrawItem(object sender, DrawItemEventArgs e)        {            if (e.Index < 0)                return;            User user = (User)ComboBoxUsers.Items[e.Index];            int padding = 10;            string displayText = $"نام: {user.FirstName,-20} نام خانوادگی: {user.LastName,-20} کدملی: {user.NationalId,-15}";            e.DrawBackground();            Rectangle textRect = new Rectangle(e.Bounds.Left + padding, e.Bounds.Top, e.Bounds.Width - 2 * padding, e.Bounds.Height);            using (var format = new StringFormat())            {                format.FormatFlags = StringFormatFlags.DirectionRightToLeft;                format.Alignment = StringAlignment.Near;                format.LineAlignment = StringAlignment.Center;                e.Graphics.DrawString(displayText, e.Font, new SolidBrush(e.ForeColor), textRect, format);            }            e.DrawFocusRectangle();        }

        #endregion                                                                                                                                                                                                                                                                                                                                       }}